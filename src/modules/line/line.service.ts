import dayjs from 'dayjs'
import { prisma } from '../../prisma/client'
import type { WebhookEvent } from '@line/bot-sdk'
import { lineClient, replyMessage } from './line.client'
import { 
	analyzeImage, 
	analyzeTextFromUser, 
	getDiabetesAnswer, 
	transcribeAudioWithGoogle 
} from '../gemini/gemini.service'
import { toHumanTiming, toNum } from '../../utils/globals'
import type { AnalysisQuestion, AnalysisResult, AppUser } from './line.type'
import { UploadImage } from '../../utils/storage'

async function handleLogging(analysis: any, replyToken: string, user: any) {
	try {
		const created = await prisma.glucoseLog.create({
			data: {
				recordedAt: new Date(),
				userId: user.id,
				value: analysis.value,
				period: analysis.timing
			}
		})
		if (!created) {
			await replyMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞')
			return
		}

		await replyMessage(replyToken, `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ${analysis.value} ‡∏ä‡πà‡∏ß‡∏á ${toHumanTiming(analysis.timing)} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏∞! üëç`)
	} catch (err) {
		console.error('handleLogging error:', err)
		await replyMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
	}
}

async function handleQuestion(analysis: AnalysisQuestion, replyToken: string) {
	try {
		const answer = await getDiabetesAnswer(analysis.query)
		await replyMessage(replyToken, answer || '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°')
	} catch (err) {
		console.error('handleQuestion error:', err)
		await replyMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö')
	}
}

async function handleTextMessageLogic(analysis: AnalysisResult, replyToken: string, user: AppUser) {
	switch (analysis.type) {
		case 'logging':
			return handleLogging(analysis, replyToken, user)
		case 'question':
			return handleQuestion(analysis, replyToken)
		case 'unknown':
		default:
			return replyMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÇ‡∏õ‡∏£‡∏î‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞')
	}
}

export async function handleLineEvents(event: WebhookEvent) {
	if (!('replyToken' in event) || !event.source?.userId) return null
	if (event.type !== 'message') return null

	const lineUserId = event.source.userId
	const replyToken = event.replyToken

	try {
		const user = (await prisma.user.upsert({
			where: { lineUserId },
			create: { lineUserId },
			update: {}
		})) as AppUser

		switch (event.message.type) {
			case 'text':
				const analysis = await analyzeTextFromUser(event.message.text)
				await handleTextMessageLogic(analysis, replyToken, user)
				break
			case 'audio':
				const audioBuffer = await lineClient.getMessageContent(event.message.id)
				const transcribedText = await transcribeAudioWithGoogle(audioBuffer)
				if (transcribedText) {
					const textAnalysis = await analyzeTextFromUser(transcribedText)
					await handleTextMessageLogic(textAnalysis, replyToken, user)
				} else {
					await replyMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°')
				}
				break
			case 'image': {
				const imageBuffer = await lineClient.getMessageContent(event.message.id)
				const imageAnalysis = await analyzeImage(imageBuffer)

				switch (imageAnalysis.image_type) {
					case 'food': {
						const foodImageUrl = await UploadImage(imageBuffer, user.id)
						await prisma.foodAnalysis.create({
							data: {
								user: { connect: { id: user.id } },
								foodName: imageAnalysis.food_name ?? null,
								carbsGram: toNum(imageAnalysis.estimated_carbs),
								sugarGram: toNum(imageAnalysis.estimated_glucose),
								advice: imageAnalysis.recommendation ?? null,
								media: {
									create: [{ url: foodImageUrl }]
								}
							}
						})

						const foodReply =
							`ü•ó ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:\n\n` +
							`‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${imageAnalysis.food_name}\n` +
							`‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${imageAnalysis.estimated_carbs}\n\n` +
							`‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${imageAnalysis.recommendation}`

						await replyMessage(replyToken, foodReply)
						break
					}

					case 'lab_result': {
						if (imageAnalysis.fasting_glucose || imageAnalysis.hba1c) {
							const labImageUrl = await UploadImage(imageBuffer, user.id)
							await prisma.labResult.create({
								data: {
									user: { connect: { id: user.id } },
									fastingGlucose: imageAnalysis.fasting_glucose,
									hba1c: imageAnalysis.hba1c,
									normalRangeMin: imageAnalysis.normal_range_min,
									normalRangeMax: imageAnalysis.normal_range_max,
									fastingGlucoseUnit: imageAnalysis.normal_range_unit,
									hba1cUnit: imageAnalysis.hba1c_unit,
									recordDate: imageAnalysis.record_date ? new Date(imageAnalysis.record_date) : new Date(),
									media: {
										create: [{ url: labImageUrl }]
									}
								}
							})
							await replyMessage(replyToken, '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ü©∫')
						} else {
							await replyMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ HbA1c ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ')
						}
						break
					}
					case 'appointment_slip': {
						if (imageAnalysis.appointment_date) {
							const appointmentImageUrl = await UploadImage(imageBuffer, user.id)
							await prisma.appointment.create({
								data: {
									user: { connect: { id: user.id } },
									appointmentDate: new Date(imageAnalysis.appointment_date),
									fullName: imageAnalysis.full_name ?? null,
									age: imageAnalysis.age ?? null,
									doctorName: imageAnalysis.doctor_name ?? null,
									hospitalName: imageAnalysis.hospital_name ?? null,
									startTime: imageAnalysis.start_time ?? null,
									reason: imageAnalysis.reason ?? null,
									endTime: imageAnalysis.end_time ?? null,
									details: imageAnalysis.details ?? null,
									media: {
										create: [{ url: appointmentImageUrl }]
									}
								}
							})

							const displayDate = dayjs(imageAnalysis.appointment_date).format('DD/MM/YYYY')
							const displayStartTime = imageAnalysis.start_time
							const displayEndTime = imageAnalysis.end_time

							await replyMessage(
								replyToken,
								`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${displayDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${displayStartTime} - ${displayEndTime} ‡∏ô. ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ üóìÔ∏è`
							)
						} else {
							await replyMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡∏ô‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ')
						}
						break
					}

					default: {
						await replyMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏´‡∏£‡∏∑‡∏≠ ‡πÉ‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞')
					}
				}
				break
			}
		}
	} catch (error) {
		console.error('An error occurred in handleEvent:', error)
		return replyMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á')
	}
}
